{"version":3,"sources":["reportWebVitals.js","departure.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","addZero","i","current","Date","hour","getHours","minute","getMinutes","time","maxtime","DepartureList","state","departures","axios","get","res","data","length","attributes","departure_time","d","toLocaleTimeString","console","log","setState","class","this","map","departure","relationships","route","id","React","Component","date","getMonth","getDate","getFullYear","day","dayMaker","getDay","ReactDOM","render","document","getElementById","StrictMode"],"mappings":"6KAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,wDCDd,SAASQ,EAAQC,GAIf,OAHIA,EAAI,KACNA,EAAI,IAAMA,GAELA,EAGT,IAAMC,EAAU,IAAIC,KAChBC,EAAOJ,EAAQE,EAAQG,YACvBC,EAASN,EAAQE,EAAQK,cACvBC,EAAI,UAAMJ,EAAN,YAAcE,GAClBG,EAAO,UAAMP,EAAQG,WAAW,EAAzB,YAA8BH,EAAQK,cAE9BG,E,4MACnBC,MAAQ,CACNC,WAAY,I,uDAId,WAAqB,IAAD,OAClBC,IAAMC,IAAN,uGAA0GN,EAA1G,6BAAmIC,IAChIf,MAAK,SAAAqB,GAEJ,IADA,IAAIH,EAAaG,EAAIC,KAAKA,KAClBf,EAAI,EAAGA,EAAIW,EAAWK,OAAQhB,IACpC,GAA8C,MAA3CW,EAAWX,GAAGiB,WAAWC,eAAuB,CACjD,IAAIC,EAAI,IAAIjB,KAAKS,EAAWX,GAAGiB,WAAWC,gBAC1CP,EAAWX,GAAGiB,WAAWC,eAAiBC,EAAEC,qBAGhDC,QAAQC,IAAIX,GACZ,EAAKY,SAAS,CAAEZ,oB,oBAKtB,WACE,OAEE,wBAAOa,MAAM,qBAAb,UACC,+BACC,6CACA,yCAEAC,KAAKf,MAAMC,WAAWe,KAAI,SAAAC,GAAS,OAAK,+BACvCA,EAAUV,WAAWC,eAAkB,+BAAKS,EAAUC,cAAcC,MAAMd,KAAKe,GAAxC,OAAoD,KAC1FH,EAAUV,WAAWC,eAAkB,+BAAKS,EAAUV,WAAWC,eAA1B,OAAkD,kB,GAhCxDa,IAAMC,WCZ3C/B,EAAU,IAAIC,KACd+B,EAAI,UAAMhC,EAAQiC,WAAW,EAAzB,YAA8BjC,EAAQkC,UAAtC,YAAmDlC,EAAQmC,eA+BrE,IAAMC,EA5BN,SAAkBA,GACjB,OAAQA,GACL,KAAK,EACH,MAAO,SAET,KAAK,EACH,MAAO,SAET,KAAK,EACF,MAAO,UAEV,KAAK,EACH,MAAO,YAET,KAAK,EACH,MAAO,WAET,KAAK,EACH,MAAO,SAET,KAAK,EACH,MAAO,WACR,QACC,MAAO,mBAKDC,CAASrC,EAAQsC,UAG7BC,IAASC,OAAOJ,EAAKK,SAASC,eAAe,YAC7CH,IAASC,OAAOR,EAAMS,SAASC,eAAe,SAE9CH,IAASC,OACP,cAAC,IAAMG,WAAP,UACC,cAAC,EAAD,MAEDF,SAASC,eAAe,SAI1BrD,M","file":"static/js/main.5eee3233.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\n\r\n//function which makes sure all time is in the correct 00:00 format if minutes or hours happen to be single digit such as 5 hour and 6 minute become 05:06\r\nfunction addZero(i) {\r\n  if (i < 10) {\r\n    i = \"0\" + i;\r\n  }\r\n  return i;\r\n}\r\n//create the time filter queries in the get request.\r\nconst current = new Date();\r\nvar hour = addZero(current.getHours());\r\nvar minute = addZero(current.getMinutes());\r\nconst time = `${hour}:${minute}`;\r\nconst maxtime = `${current.getHours()+2}:${current.getMinutes()}`\r\n\r\nexport default class DepartureList extends React.Component {\r\n  state = {\r\n    departures: []\r\n  }\r\n\r\n  //make the get request. This gets a json file with the Commuter Rail schedules for South Station specifically for the current day after the current time up to 2 hours later.\r\n  componentDidMount() {\r\n    axios.get(`https://api-v3.mbta.com/schedules?sort=departure_time&filter[stop]=NEC-2287&filter[min_time]=${time}&filter[max_time]=${maxtime}`)\r\n      .then(res => {\r\n        var departures = res.data.data;\r\n        for(let i = 0; i < departures.length; i++){     //converts the response departure_time format into readable plaintext times.\r\n          if(departures[i].attributes.departure_time != null){\r\n            var d = new Date(departures[i].attributes.departure_time);\r\n            departures[i].attributes.departure_time = d.toLocaleTimeString();\r\n          }\r\n        }\r\n        console.log(departures); //for debugging.\r\n        this.setState({ departures });\r\n      })\r\n  }\r\n\r\n  //creates a departure table which populates with the destinations and departure time listed in the response JSON.\r\n  render() {\r\n    return (\r\n\r\n      <table class=\"departureContainer\">\r\n       <tr>\r\n        <th>Destination</th>\r\n        <th>Time</th>\r\n       </tr>\r\n      { this.state.departures.map(departure => (<tr>\r\n      \t{(departure.attributes.departure_time) ? <td>{departure.relationships.route.data.id} </td> : null}\r\n        {(departure.attributes.departure_time) ? <td>{departure.attributes.departure_time} </td> : null}\r\n        </tr>))}\r\n      </table>\r\n      )\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport DepartureList from './departure.js';\n\n//Setting the current date for the board \nconst current = new Date();\nconst date = `${current.getMonth()+1}-${current.getDate()}-${current.getFullYear()}`;\n\n//function to take the integer output of the 'getDay()' function and convert it to a day string.\nfunction dayMaker(day) {\n\tswitch (day) {\n  \t\tcase 0:\n    \t\treturn \"Sunday\";\n    \tbreak;\n  \t\tcase 1:\n    \t\treturn \"Monday\";\n    \tbreak;\n  \t\tcase 2:\n     \t\treturn \"Tuesday\";\n    \tbreak;\n  \t\tcase 3:\n    \t\treturn \"Wednesday\";\n    \tbreak;\n  \t\tcase 4:\n    \t\treturn \"Thursday\";\n    \tbreak;\n  \t\tcase 5:\n    \t\treturn \"Friday\";\n    \tbreak;\n  \t\tcase 6:\n    \t\treturn \"Saturday\";\n    \tdefault:\n    \t\treturn \"Outside of time\";\n\t}\n}\n \n//current day of the week to add to the board\nconst day = dayMaker(current.getDay());\n\n\nReactDOM.render(day, document.getElementById('weekday'));\nReactDOM.render(date, document.getElementById('date'));\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<DepartureList />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\nreportWebVitals();\n"],"sourceRoot":""}